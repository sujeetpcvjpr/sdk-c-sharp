using System;
using System.ComponentModel;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace PaddleCheckoutSDK
{
using System.Diagnostics;
    /// <summary>
    /// CheckoutControl is a standard WinForms user control showing the Paddle Checkout website.
    /// The control handles the checkout process and provides feedback via events.
    /// </summary>
    public partial class CheckoutControl : UserControl, ICheckout
    {
        #region Public properties and events

      
        /// <summary>
        /// Approximate time to wait for transaction processing to complete. Default 60secs.
        /// </summary>
        [DefaultValue(60)]
        public int TimeOut { get; set; }

        /// <summary>
        /// Set label for completing purchase loading circle
        /// </summary>
        [DefaultValue("Completing Purchase")]
        public string CompletingPurchaseText { private get { return labelCompleting.Text; } set { labelCompleting.Text = value; } }

        /// <summary>
        /// Set when all transaction processing is complete. Read Only.
        /// </summary>
        public bool TransactionComplete { get; internal set; } = false;
        /// <summary>
        /// Set Vendor ID obtained from Vendor Dashboard. Required.
        /// </summary>
        public string VendorID { set; internal get; }
        /// <summary>
        /// Application Name as setup on Vendor Dashboard. Required.
        /// </summary>
        public string AppName { set; internal get; }

        /// <summary>
        /// Set Product ID obtained from Vendor Dashboard. Required.
        /// </summary>
        public string ProductID { set; internal get; }

        public string AppVersion { set; internal get; } = "1.0";
        public string SDKVersion { set; internal get; } = "1.0";

        /// <summary>
        /// Returns License Code as generated by web service
        /// </summary>
        public string LicenseCode { get; internal set; }
        public string LockerID { get; internal set; }
        /// <summary>
        /// Returns Order ID generated by web service
        /// </summary>
        public string OrderID { get; internal set; }

        /// <summary>
        /// Returns email address of customer as entered in checkout
        /// </summary>
        public string CustomerEmail { get; internal set; }

        /// <summary>
        /// ProcessStatus contains all information returned about transaction. Null until TransactionComplete==true
        /// </summary>
        public ProcessStatus ProcessStatus { get => processStatus; set { processStatus = value; } }

        /// <summary>
        /// Returns the version of the Web Browser Control. Corresponds with IE version.
        /// </summary>
        public string WebBrowserVersion { get => controller.WebBrowserVersion; private set => WebBrowserVersion = value; }

        /// <summary>
        /// TransactionCompletedEvent is fired when payment accepted and processing is finished. Control users must provide a handler implementation  for this event.
        /// EventArgs includes a block of text containing information about the transaction  to be used by vendor
        /// </summary>
        public event TranactionCompleteEventHandler TransactionCompleteEvent;
        /// <summary>
        /// TransactionBeginEvent is fired after the checkout process has started and opening web page has loaded. Control users can optimally provide a handler.
        /// </summary>
        public event TranactionBeginEventHandler TransactionBeginEvent;
        /// <summary>
        /// Fires if an error is thrown during checkout processing. Not required but recommended to identify unexpected conditions.
        /// </summary>
        public event TranactionErrorEventHandler TransactionErrorEvent;
        /// <summary>
        /// Fires if the small X icon on checkout web pages is pressed. Implement handler to close user interface. 
        /// </summary>
        public event CheckoutClosedEventHandler CheckoutClosed;
        /// <summary>
        /// Fires when user presses Continue button on email and location pages of the Checkout web site
        /// </summary>
        public event PageSumbittedEventHandler PageSubmitted;

        /// <summary>
        /// Underlying WinForms WebBrowser Control instance
        /// </summary>
        public WebBrowser WebBrowser { get { return webBrowser; } }

        /// <summary>
        /// Fills email into web form and skips display of email form
        /// </summary>
        public string PreFilledEmail {  get; set; }
        /// <summary>
        /// Fills Post/Zip into web form and skips display of email form
        /// </summary>
        public string PreFilledPostCode {  get; set; }
        /// <summary>
        /// Fills country code into web form and skips display of country select form
        /// </summary>
        public string PreFilledCountryCode {  get; set; }
        /// <summary>
        /// Fills Pass Through data
        /// </summary>
        public string PassThroughData {  get; set; }
        /// <summary>
        /// Fills coupon data into web form
        /// </summary>
        public string PreFilledCoupon {  get; set; }
        /// <summary>
        /// Returns country code entered by user into web form
        /// </summary>
        public string UserCountry { get; set; }
       
        /// <summary>
        /// Sets array of PriceOverride structures containing multiple prices
        /// </summary>
        public PriceOverride[] Prices { set; get; }
      
        /// <summary>
        /// Email as submitted into web form 
        /// </summary>
        public string UserSubmittedEmail { get; set; }

        #endregion

        #region private members
        private ProcessStatus processStatus;
        CheckoutControlController controller;
        #endregion

        public Form parent;

        /// <summary>
        /// Default Constructor. User must set Vendor, Product and AppName properties
        /// </summary>
        public CheckoutControl()
        {
            InitializeComponent();

            controller = new CheckoutControlController(this);

            controller.SetupControl();
        }

        /// <summary>
        /// Alternative Constructor. Pass in Vendor ID, Product ID and AppName
        /// </summary>
        /// <param name="VendorID">Vendor ID obtained from Vendor Dashboard.</param>
        /// <param name="ProductID">Product ID obtained from Vendor Dashboard</param>
        /// <param name="AppName">Application Name as setup on Vendor Dashboard</param>
        public CheckoutControl(string VendorID, string ProductID, string AppName)
        {
            InitializeComponent();

            this.VendorID = VendorID;
            this.ProductID = ProductID;
            this.AppName = AppName;

            controller = new CheckoutControlController(this);

            controller.SetupControl();
        }


        internal void ShowLoadingCircle(bool showLable = false)
        {
            controller.ShowLoadingCircle(showLable);
        }

        internal void HideLoadingCircle(bool showLable = false)
        {
            controller.HideLoadingCircle();
        }

        internal void SendErrorAsync(string errorString)
        { 
            Debug.WriteLine($"Send Error Async {errorString}");

            BackgroundWorker bw = new BackgroundWorker();
            bw.DoWork += new DoWorkEventHandler(this.FireErrorEvent);
            bw.RunWorkerCompleted += SendError_RunWorkerCompleted;
            bw.RunWorkerAsync(errorString);
        }

        private void FireErrorEvent(object sender, DoWorkEventArgs e)
        {
            e.Result = e.Argument;
       
        }

        private void SendError_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            TransactionErrorEventArgs errEvent = new TransactionErrorEventArgs
            {
                Error = e.Result as string
            };

            TransactionErrorEvent?.Invoke(this, errEvent);
        }


        internal void FireTranactionCompleteEvent(TransactionCompleteEventArgs e)
        {
            TransactionCompleteEventArgs evt = new TransactionCompleteEventArgs
            {
                ProductID = e.ProductID,
                UserEmail = e.UserEmail,
                UserCountry = e.UserCountry,
                LicenseCode = e.LicenseCode,
                OrderID = e.OrderID,
                ProcessStatus = e.ProcessStatus
            };

            TransactionCompleteEvent?.Invoke(this, e);
        }

        internal void FireTransactionBeginEvent()
        {
            TransactionBeginEventArgs e = new TransactionBeginEventArgs();

            TransactionBeginEvent?.Invoke(this, e);
        }

        internal void FireCheckoutCloseEvent()
        {
            TransactionBeginEventArgs e = new TransactionBeginEventArgs();

            CheckoutClosed?.Invoke(this, e);
        }

        internal void FirePageSubmittedEvent(PageSubmittedEventArgs e)
        {
            PageSubmitted?.Invoke(this, e);
        }

        private void WebBrowser_Navigated(object sender, WebBrowserNavigatedEventArgs e)
        {
            Debug.WriteLine("Navigated " + e.Url + Environment.NewLine);
        }

        /// <summary>
        /// This is where it all begins. StartPurchase loads checkout web page and begins the process of checkout.
        /// </summary>
        public void StartPurchase()
        {
            Debug.WriteLine($"Start Purchase {DateTime.Now.ToString()}");

            if (String.IsNullOrEmpty(ProductID))
            {
                throw new InvalidOperationException("Product ID must be set BEFORE starting purchase");
            }

            if (!TestNumeric(ProductID))
            {
                throw new InvalidOperationException("Product ID should be an Numeric value");
            }

            if (String.IsNullOrEmpty(VendorID))
            {
                throw new InvalidOperationException("Vendor ID must be set BEFORE starting purchase");
            }

            if ( !TestNumeric(VendorID))
            {
                throw new InvalidOperationException("Vendor ID should be a Numeric Value");
            }

            if (String.IsNullOrEmpty(AppName))
            {
                throw new InvalidOperationException("App Name must be set BEFORE starting purchase");
            }

            if (TransactionBeginEvent == null)
            {
                // throw new Exception("TransactionBeginEvent event must be set BEFORE starting purchase");
            }

            if (TransactionCompleteEvent == null)
            {
                throw new InvalidOperationException("TransactionCompleteEvent event must be set BEFORE starting purchase");
            }

            if (CheckoutClosed == null)
            {
                // throw new Exception("CheckoutClosed event must be set BEFORE starting purchase");
            }

            if (Prices != null)
            {
                           
                for(int priceCount = 0; priceCount< Prices.Length;priceCount++)
                {
                    if( string.IsNullOrEmpty(Prices[priceCount].Authorization))
                    {
                        throw new InvalidOperationException("Price Changes requires Authorization to be set in each PriceOverride structure");
                    }
                }

            
            }

         

            controller.StartPurchase();
        }

        private  bool TestNumeric(string toTest)
        {
            Regex rgx = new Regex(@"^[0-9]+$");
            bool pass = false;

            if (rgx.IsMatch(toTest))
            {
                pass = true;
            }
            return pass;
        }

        internal void LaunchDefaultBrowser()
        {
            controller.LaunchDefaultBrowser();
        }

#if DEBUG
        internal string GenerateJS()
        {
            return controller.InvokeScript(false);
        }
#endif

    }


}
